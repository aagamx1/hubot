const querystring = require('querystring');

// Holds a list of jobs, so we can trigger them with a number
// instead of the job's name. Gets populated on when calling
// list.
const jobList = [];

const formatter = function(title, description) {
  var attachment = {
                title: "TITLE",
                title_link: "Title link",
                fields: [
                  {
                    title: "Status Title",
                    value: "Status Value",
                    short: true
                  }
                ],
                color: "#4b758b",
                author_icon: "https://wiki.jenkins-ci.org/download/attachments/2916393/master-jenkins.svg"
              }

  return msg.robot.adapter.customMessage({
    channel: msg.envelope.room,
    username: msg.robot.name,
    attachments: [attachment]
  });

}

const jenkinsBuildById = function(msg) {
  // Switch the index with the job name
  const job = jobList[parseInt(msg.match[1]) - 1];

  if (job) {
    msg.match[1] = job;
 return formatter("title", "description");
    return jenkinsBuild(msg);
  } else {
    return msg.reply("I couldn't find that job. Try `jenkins list` to get a list.");
  }
};

var jenkinsBuild = function(msg, buildWithEmptyParameters) {
    const url = process.env.HUBOT_JENKINS_URL;
    const job = querystring.escape(msg.match[1]);
    const params = msg.match[3];
    const command = buildWithEmptyParameters ? "buildWithParameters" : "build";
    const path = params ? `${url}/job/${job}/buildWithParameters?${params}` : `${url}/job/${job}/${command}`;

    const req = msg.http(path);

    if (process.env.HUBOT_JENKINS_AUTH) {
      const auth = new Buffer(process.env.HUBOT_JENKINS_AUTH).toString('base64');
      req.headers({Authorization: `Basic ${auth}`});
    }

    req.header('Content-Length', 0);
    return req.post()(function(err, res, body) {
        if (err) {
          return msg.reply(`Jenkins says: ${err}`);
        } else if (200 <= res.statusCode && res.statusCode < 400) { // Or, not an error code.
          return msg.reply(`(${res.statusCode}) Build started for ${job} ${url}/job/${job}`);
        } else if (400 === res.statusCode) {
          return jenkinsBuild(msg, true);
        } else {
          return msg.reply(`Jenkins says: Status ${res.statusCode} ${body}`);
        }
    });
  };

const jenkinsDescribe = function(msg) {
    let auth;
    const url = process.env.HUBOT_JENKINS_URL;
    const job = msg.match[1];

    let path = `${url}/job/${job}/api/json`;

    let req = msg.http(path);

    if (process.env.HUBOT_JENKINS_AUTH) {
      auth = new Buffer(process.env.HUBOT_JENKINS_AUTH).toString('base64');
      req.headers({Authorization: `Basic ${auth}`});
    }

    req.header('Content-Length', 0);
    return req.get()(function(err, res, body) {
        if (err) {
          return msg.send(`Jenkins says: ${err}`);
        } else {
          let response = "";
          try {
            let content = JSON.parse(body);
            response += `JOB: ${content.displayName}\n`;
            response += `URL: ${content.url}\n`;

            if (content.description) {
              response += `DESCRIPTION: ${content.description}\n`;
            }

            response += `ENABLED: ${content.buildable}\n`;
            response += `STATUS: ${content.color}\n`;

            let tmpReport = "";
            if (content.healthReport.length > 0) {
              for (let report of Array.from(content.healthReport)) {
                tmpReport += `\n  ${report.description}`;
              }
            } else {
              tmpReport = " unknown";
            }
            response += `HEALTH: ${tmpReport}\n`;

            let parameters = "";
            for (let item of Array.from(content.actions)) {
              if (item.parameterDefinitions) {
                for (let param of Array.from(item.parameterDefinitions)) {
                  const tmpDescription = param.description ? ` - ${param.description} ` : "";
                  const tmpDefault = param.defaultParameterValue ? ` (default=${param.defaultParameterValue.value})` : "";
                  parameters += `\n  ${param.name}${tmpDescription}${tmpDefault}`;
                }
              }
            }

            if (parameters !== "") {
              response += `PARAMETERS: ${parameters}\n`;
            }

            msg.send(response);

            if (!content.lastBuild) {
              return;
            }

            path = `${url}/job/${job}/${content.lastBuild.number}/api/json`;
            req = msg.http(path);
            if (process.env.HUBOT_JENKINS_AUTH) {
              auth = new Buffer(process.env.HUBOT_JENKINS_AUTH).toString('base64');
              req.headers({Authorization: `Basic ${auth}`});
            }

            req.header('Content-Length', 0);
            return req.get()(function(err, res, body) {
                if (err) {
                  return msg.send(`Jenkins says: ${err}`);
                } else {
                  response = "";
                  try {
                    content = JSON.parse(body);
                    console.log(JSON.stringify(content, null, 4));
                    const jobstatus = content.result || 'PENDING';
                    const jobdate = new Date(content.timestamp);
                    response += `LAST JOB: ${jobstatus}, ${jobdate}\n`;

                    return msg.send(response);
                  } catch (error) {
                    return msg.send(error);
                  }
                }
            });

          } catch (error1) {
            const error = error1;
            return msg.send(error);
          }
        }
    });
  };

const jenkinsLast = function(msg) {
    const url = process.env.HUBOT_JENKINS_URL;
    const job = msg.match[1];

    const path = `${url}/job/${job}/lastBuild/api/json`;

    const req = msg.http(path);

    if (process.env.HUBOT_JENKINS_AUTH) {
      const auth = new Buffer(process.env.HUBOT_JENKINS_AUTH).toString('base64');
      req.headers({Authorization: `Basic ${auth}`});
    }

    req.header('Content-Length', 0);
    return req.get()(function(err, res, body) {
        if (err) {
          return msg.send(`Jenkins says: ${err}`);
        } else {
          let response = "";
          try {
            const content = JSON.parse(body);
            response += `NAME: ${content.fullDisplayName}\n`;
            response += `URL: ${content.url}\n`;

            if (content.description) {
              response += `DESCRIPTION: ${content.description}\n`;
            }

            response += `BUILDING: ${content.building}\n`;

            return msg.send(response);
          } catch (error) {}
        }
    });
  };

const jenkinsList = function(msg) {
    const url = process.env.HUBOT_JENKINS_URL;
    const filter = new RegExp(msg.match[2], 'i');
    const req = msg.http(`${url}/api/json`);

    if (process.env.HUBOT_JENKINS_AUTH) {
      const auth = new Buffer(process.env.HUBOT_JENKINS_AUTH).toString('base64');
      req.headers({Authorization: `Basic ${auth}`});
    }

    return req.get()(function(err, res, body) {
        let response = "";
        if (err) {
          return msg.send(`Jenkins says: ${err}`);
        } else {
          try {
            const content = JSON.parse(body);
            for (let job of Array.from(content.jobs)) {
              // Add the job to the jobList
              let index = jobList.indexOf(job.name);
              if (index === -1) {
                jobList.push(job.name);
                index = jobList.indexOf(job.name);
              }

              const state = job.color === "red" ? "FAIL" : "PASS";
              if (filter.test(job.name)) {
                response += `[${index + 1}] ${job.name}\n`;
              }
            }
            // return msg.send(response);
            return formatter("title", "description");
          } catch (error) {
            return msg.send(error);
          }
        }
    });
  };

module.exports = function(robot) {
  robot.respond(/j(?:enkins)? build ([\w\.\-_ ]+)(, (.+))?/i, msg => jenkinsBuild(msg, false));

  robot.respond(/j(?:enkins)? b (\d+)/i, msg => jenkinsBuildById(msg));

  robot.respond(/j(?:enkins)? list( (.+))?/i, msg => jenkinsList(msg));

  robot.respond(/j(?:enkins)? describe (.*)/i, msg => jenkinsDescribe(msg));

  robot.respond(/j(?:enkins)? last (.*)/i, msg => jenkinsLast(msg));

  return robot.jenkins = {
    list: jenkinsList,
    build: jenkinsBuild,
    describe: jenkinsDescribe,
    last: jenkinsLast
  };
};